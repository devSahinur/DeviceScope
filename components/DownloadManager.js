import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Share,
} from 'react-native';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';
import { Ionicons } from '@expo/vector-icons';
import { useTheme } from '../contexts/ThemeContext';
import StorageManager from '../utils/storage';

const DownloadManager = ({ deviceInfo, performanceData }) => {
  const { colors } = useTheme();
  const [isExporting, setIsExporting] = useState(false);

  const generateJsonReport = async () => {
    try {
      setIsExporting(true);
      
      const exportData = {
        generatedAt: new Date().toISOString(),
        deviceInfo: deviceInfo,
        performanceData: performanceData,
        appInfo: {
          name: 'DeviceScope',
          version: '1.0.0',
          platform: 'React Native',
          description: 'Comprehensive Device Intelligence Platform',
        },
      };

      const jsonString = JSON.stringify(exportData, null, 2);
      const fileName = `device-info-${Date.now()}.json`;
      const fileUri = FileSystem.documentDirectory + fileName;

      await FileSystem.writeAsStringAsync(fileUri, jsonString);
      
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(fileUri, {
          mimeType: 'application/json',
          dialogTitle: 'Share Device Information Report',
        });
      } else {
        Alert.alert('Success', `Report saved to: ${fileUri}`);
      }

      // Save to storage
      await StorageManager.saveOfflineData({
        type: 'export',
        fileName: fileName,
        data: exportData,
      });

    } catch (error) {
      console.error('Export error:', error);
      Alert.alert('Error', 'Failed to export data: ' + error.message);
    } finally {
      setIsExporting(false);
    }
  };

  const generateTextReport = async () => {
    try {
      setIsExporting(true);

      let textReport = '='.repeat(50) + '\n';
      textReport += 'DEVICESCOPE - COMPREHENSIVE DEVICE REPORT\n';
      textReport += '='.repeat(50) + '\n\n';
      textReport += `Generated: ${new Date().toLocaleString()}\n\n`;

      // Device Information
      textReport += 'DEVICE INFORMATION:\n';
      textReport += '-'.repeat(30) + '\n';
      
      Object.entries(deviceInfo || {}).forEach(([key, value]) => {
        const displayValue = typeof value === 'object' 
          ? JSON.stringify(value) 
          : value?.toString() || 'N/A';
        textReport += `${key}: ${displayValue}\n`;
      });

      // Performance Data Summary
      if (performanceData && performanceData.memory && performanceData.memory.length > 0) {
        textReport += '\n\nPERFORMANCE SUMMARY:\n';
        textReport += '-'.repeat(30) + '\n';
        
        const avgMemory = performanceData.memory.reduce((a, b) => a + b, 0) / performanceData.memory.length;
        const avgFPS = performanceData.fps.reduce((a, b) => a + b, 0) / performanceData.fps.length;
        
        textReport += `Average Memory Usage: ${avgMemory.toFixed(2)} MB\n`;
        textReport += `Average FPS: ${avgFPS.toFixed(2)}\n`;
        textReport += `Data Points Collected: ${performanceData.memory.length}\n`;
      }

      textReport += '\n' + '='.repeat(50) + '\n';
      textReport += 'Generated by DeviceScope v1.0.0\n';
      textReport += 'Comprehensive Device Intelligence Platform\n';
      textReport += '='.repeat(50);

      const fileName = `device-info-${Date.now()}.txt`;
      const fileUri = FileSystem.documentDirectory + fileName;

      await FileSystem.writeAsStringAsync(fileUri, textReport);
      
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(fileUri, {
          mimeType: 'text/plain',
          dialogTitle: 'Share Device Information Report',
        });
      } else {
        Alert.alert('Success', `Report saved to: ${fileUri}`);
      }

    } catch (error) {
      console.error('Text export error:', error);
      Alert.alert('Error', 'Failed to export text report: ' + error.message);
    } finally {
      setIsExporting(false);
    }
  };

  const shareQuickSummary = async () => {
    try {
      if (!deviceInfo) {
        Alert.alert('Error', 'No device information available to share');
        return;
      }

      const summary = `📱 DeviceScope - Device Intelligence Summary:

🔍 Device Analysis:
• Device: ${deviceInfo['Device Name'] || 'Unknown'}
• Model: ${deviceInfo['Model Name'] || 'Unknown'}
• Platform: ${deviceInfo['Platform']} ${deviceInfo['Platform Version']}
• Memory: ${deviceInfo['Total Memory'] || 'Unknown'}
• Battery: ${deviceInfo['Battery Level'] || 'Unknown'}
• Network: ${deviceInfo['Connection Type'] || 'Unknown'}

⚡ Performance Status:
• Touch Response: ${deviceInfo['Touch Responsiveness'] || 'Optimized'}
• Animation: ${deviceInfo['Animation Performance'] || '60 FPS'}

Generated by DeviceScope - Comprehensive Device Intelligence Platform`;

      await Share.share({
        message: summary,
        title: 'Device Information Summary',
      });

    } catch (error) {
      console.error('Share error:', error);
      Alert.alert('Error', 'Failed to share summary: ' + error.message);
    }
  };

  const exportStorageData = async () => {
    try {
      setIsExporting(true);
      
      const allData = await StorageManager.exportAllData();
      
      if (!allData) {
        Alert.alert('Error', 'Failed to export storage data');
        return;
      }

      const jsonString = JSON.stringify(allData, null, 2);
      const fileName = `device-storage-export-${Date.now()}.json`;
      const fileUri = FileSystem.documentDirectory + fileName;

      await FileSystem.writeAsStringAsync(fileUri, jsonString);
      
      if (await Sharing.isAvailableAsync()) {
        await Sharing.shareAsync(fileUri, {
          mimeType: 'application/json',
          dialogTitle: 'Share Complete Data Export',
        });
      } else {
        Alert.alert('Success', `Complete data exported to: ${fileUri}`);
      }

    } catch (error) {
      console.error('Storage export error:', error);
      Alert.alert('Error', 'Failed to export storage data: ' + error.message);
    } finally {
      setIsExporting(false);
    }
  };

  const styles = createStyles(colors);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Export & Share Options</Text>
      
      <View style={styles.optionsGrid}>
        <TouchableOpacity
          onPress={generateJsonReport}
          style={styles.optionButton}
          disabled={isExporting}
        >
          <Ionicons name="document" size={24} color={colors.primary} />
          <Text style={styles.optionTitle}>JSON Report</Text>
          <Text style={styles.optionDescription}>
            Complete data in JSON format
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          onPress={generateTextReport}
          style={styles.optionButton}
          disabled={isExporting}
        >
          <Ionicons name="document-text" size={24} color={colors.success} />
          <Text style={styles.optionTitle}>Text Report</Text>
          <Text style={styles.optionDescription}>
            Human-readable text format
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          onPress={shareQuickSummary}
          style={styles.optionButton}
          disabled={isExporting}
        >
          <Ionicons name="share" size={24} color={colors.info} />
          <Text style={styles.optionTitle}>Quick Share</Text>
          <Text style={styles.optionDescription}>
            Share essential device info
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          onPress={exportStorageData}
          style={styles.optionButton}
          disabled={isExporting}
        >
          <Ionicons name="archive" size={24} color={colors.warning} />
          <Text style={styles.optionTitle}>Full Export</Text>
          <Text style={styles.optionDescription}>
            Complete app data export
          </Text>
        </TouchableOpacity>
      </View>

      {isExporting && (
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Preparing export...</Text>
        </View>
      )}

      <View style={styles.note}>
        <Ionicons name="information-circle" size={16} color={colors.info} />
        <Text style={styles.noteText}>
          Exported files can be shared via email, cloud storage, or other apps.
          All data is processed locally on your device.
        </Text>
      </View>
    </View>
  );
};

const createStyles = (colors) => StyleSheet.create({
  container: {
    padding: 16,
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: colors.text,
    marginBottom: 16,
  },
  optionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  optionButton: {
    width: '48%',
    backgroundColor: colors.background,
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: colors.border,
    alignItems: 'center',
    marginBottom: 12,
  },
  optionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.text,
    marginTop: 8,
    marginBottom: 4,
    textAlign: 'center',
  },
  optionDescription: {
    fontSize: 12,
    color: colors.textSecondary,
    textAlign: 'center',
    lineHeight: 16,
  },
  loadingContainer: {
    alignItems: 'center',
    padding: 16,
  },
  loadingText: {
    fontSize: 14,
    color: colors.textSecondary,
  },
  note: {
    flexDirection: 'row',
    backgroundColor: colors.info + '20',
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: colors.info + '40',
  },
  noteText: {
    flex: 1,
    fontSize: 12,
    color: colors.info,
    marginLeft: 8,
    lineHeight: 16,
  },
});

export default DownloadManager;